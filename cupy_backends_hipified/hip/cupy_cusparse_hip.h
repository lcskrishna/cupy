// !!! This is a file automatically generated by hipify!!!
#ifndef INCLUDE_GUARD_CUDA_CUPY_CUSPARSE_H
#define INCLUDE_GUARD_CUDA_CUPY_CUSPARSE_H

#include <hip/hip_runtime.h>
#include <hipsparse.h>

#if !defined(CUSPARSE_VERSION)
  // CUSPARSE_VERSION introduced in CUDA 10.1 Update 2 (10.1.243).
  #if TORCH_HIP_VERSION < 10000
    #define CUSPARSE_VERSION TORCH_HIP_VERSION // TORCH_HIP_VERSION used instead
  #elif TORCH_HIP_VERSION < 10010  // CUDA 10.0.x
    # define CUSPARSE_VERSION 10000
  #elif TORCH_HIP_VERSION < 10020  // CUDA 10.1.x
    // CUSPARSE_VER_MAJOR introduced in CUDA 10.1 Update 1 (10.1.168).
    #if !defined(CUSPARSE_VER_MAJOR)
      // CUDA 10.1 (10.1.105) contains cuSPARSE 10.1
      #define CUSPARSE_VERSION 10010
    #else
      // CUDA 10.1 Update 1 (10.1.168) contains cuSPARSE 10.2.0.0
      #define CUSPARSE_VERSION (CUSPARSE_VER_MAJOR * 1000 + \
                                CUSPARSE_VER_MINOR *  100 + \
                                CUSPARSE_VER_PATCH)
    #endif
  #endif
#endif  // #if !defined(CUSPARSE_VERSION)

/*
 * Generic APIs are not suppoted in CUDA 10.1/10.2 on Windows.
 * These APIs are available in headers in CUDA 10.1 and 10.1 Update 1,
 * but hidden in 10.1 Update 2 and 10.2 on Windows.
 */

#if defined(_WIN32) && (CUSPARSE_VERSION < 11000)
  #if 10200 < CUSPARSE_VERSION
    #define WIN32_EXPOSE_SPMM_STUB_DECL 1
  #else
    #define WIN32_EXPOSE_SPMM_STUB_DECL 0
  #endif
  #define WIN32_EXPOSE_SPMM_STUB_IMPL 1
#else
  #define WIN32_EXPOSE_SPMM_STUB_DECL 0
  #define WIN32_EXPOSE_SPMM_STUB_IMPL 0
#endif

#if CUSPARSE_VERSION < 10010
// Added in cuSPARSE 10.1 (CUDA 10.1.105)

// CSR2CSC
typedef enum {} cusparseCsr2CscAlg_t;

#endif  // #if CUSPARSE_VERSION < 10010

#if CUSPARSE_VERSION < 10010 || WIN32_EXPOSE_SPMM_STUB_DECL
// Generic API types added in cuSPARSE 10.1 (CUDA 10.1.105)

typedef void* hipsparseSpMatDescr_t;
typedef void* hipsparseDnMatDescr_t;
typedef enum {} hipsparseIndexType_t;
typedef enum {} cusparseFormat_t;
typedef enum {} cusparseOrder_t;
typedef enum {} hipsparseSpMMAlg_t;

#endif  // #if CUSPARSE_VERSION < 10010 || WIN32_EXPOSE_SPMM_STUB_DECL

#if CUSPARSE_VERSION < 10200
// Added in cuSPARSE 10.2 (CUDA 10.1.168)

// CSR2CSC
hipsparseStatus_t cusparseCsr2cscEx2_bufferSize(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseCsr2cscEx2(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

#endif  // #if CUSPARSE_VERSION < 10200

#if CUSPARSE_VERSION < 10200 || WIN32_EXPOSE_SPMM_STUB_DECL
// Generic API types added in cuSPARSE 10.2 (CUDA 10.1.168)

typedef void* cusparseSpVecDescr_t;
typedef void* hipsparseDnVecDescr_t;
typedef enum {} hipsparseSpMVAlg_t;

#endif  // #if CUSPARSE_VERSION < 10200 || WIN32_EXPOSE_SPMM_STUB_DECL

#if CUSPARSE_VERSION < 10200 || WIN32_EXPOSE_SPMM_STUB_IMPL
// Generic APIs added in cuSPARSE 10.2 (CUDA 10.1.168)

/*
 * On Windows, implementations are not exposed from DLL in CUDA 10.1/10.2
 * although it is declared in the header. So we have to provide a stub
 * implementation using the full signature to match with the signature
 * declared in hipsparse.h, instead of using (...).
 */

hipsparseStatus_t cusparseCreateSpVec(
    cusparseSpVecDescr_t* spVecDescr,
    int64_t               size,
    int64_t               nnz,
    void*                 indices,
    void*                 values,
    hipsparseIndexType_t   idxType,
    cusparseIndexBase_t   idxBase,
    hipDataType          valueType) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseDestroySpVec(cusparseSpVecDescr_t spVecDescr) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseSpVecGet(
    const cusparseSpVecDescr_t spVecDescr,
    int64_t*                   size,
    int64_t*                   nnz,
    void**                     indices,
    void**                     values,
    hipsparseIndexType_t*       idxType,
    cusparseIndexBase_t*       idxBase,
    hipDataType*              valueType) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseSpVecGetIndexBase(
    const cusparseSpVecDescr_t spVecDescr,
    cusparseIndexBase_t*       idxBase) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseSpVecGetValues(
    const cusparseSpVecDescr_t spVecDescr,
    void**                     values) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseSpVecSetValues(
    cusparseSpVecDescr_t spVecDescr,
    void*                values) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t hipsparseCreateCoo(
    hipsparseSpMatDescr_t* spMatDescr,
    int64_t               rows,
    int64_t               cols,
    int64_t               nnz,
    void*                 cooRowInd,
    void*                 cooColInd,
    void*                 cooValues,
    hipsparseIndexType_t   cooIdxType,
    cusparseIndexBase_t   idxBase,
    hipDataType          valueType) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseCreateCooAoS(
    hipsparseSpMatDescr_t* spMatDescr,
    int64_t               rows,
    int64_t               cols,
    int64_t               nnz,
    void*                 cooInd,
    void*                 cooValues,
    hipsparseIndexType_t   cooIdxType,
    cusparseIndexBase_t   idxBase,
    hipDataType          valueType) {
  return HIPSPARSE_STATUS_SUCCESS;
}


hipsparseStatus_t hipsparseCreateCsr(
    hipsparseSpMatDescr_t* spMatDescr,
    int64_t               rows,
    int64_t               cols,
    int64_t               nnz,
    void*                 csrRowOffsets,
    void*                 csrColInd,
    void*                 csrValues,
    hipsparseIndexType_t   csrRowOffsetsType,
    hipsparseIndexType_t   csrColIndType,
    cusparseIndexBase_t   idxBase,
    hipDataType          valueType) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t hipsparseDestroySpMat(hipsparseSpMatDescr_t spMatDescr) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseCooGet(
    const hipsparseSpMatDescr_t spMatDescr,
    int64_t*                   rows,
    int64_t*                   cols,
    int64_t*                   nnz,
    void**                     cooRowInd,  // COO row indices
    void**                     cooColInd,  // COO column indices
    void**                     cooValues,  // COO values
    hipsparseIndexType_t*       idxType,
    cusparseIndexBase_t*       idxBase,
    hipDataType*              valueType) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseCooAoSGet(
    const hipsparseSpMatDescr_t spMatDescr,
    int64_t*                   rows,
    int64_t*                   cols,
    int64_t*                   nnz,
    void**                     cooInd,     // COO indices
    void**                     cooValues,  // COO values
    hipsparseIndexType_t*       idxType,
    cusparseIndexBase_t*       idxBase,
    hipDataType*              valueType) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseCsrGet(
    const hipsparseSpMatDescr_t spMatDescr,
    int64_t*                   rows,
    int64_t*                   cols,
    int64_t*                   nnz,
    void**                     csrRowOffsets,
    void**                     csrColInd,
    void**                     csrValues,
    hipsparseIndexType_t*       csrRowOffsetsType,
    hipsparseIndexType_t*       csrColIndType,
    cusparseIndexBase_t*       idxBase,
    hipDataType*              valueType) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseSpMatGetFormat(
    const hipsparseSpMatDescr_t spMatDescr,
    cusparseFormat_t*          format) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseSpMatGetIndexBase(
    const hipsparseSpMatDescr_t spMatDescr,
    cusparseIndexBase_t*       idxBase) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseSpMatGetValues(
    const hipsparseSpMatDescr_t spMatDescr,
    void**                     values) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseSpMatSetValues(
    hipsparseSpMatDescr_t spMatDescr,
    void*                values) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseSpMatGetStridedBatch(
    const hipsparseSpMatDescr_t spMatDescr,
    int*                       batchCount) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseSpMatSetStridedBatch(
    hipsparseSpMatDescr_t spMatDescr,
    int                  batchCount) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t hipsparseCreateDnVec(
    hipsparseDnVecDescr_t* dnVecDescr,
    int64_t               size,
    void*                 values,
    hipDataType          valueType) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t hipsparseDestroyDnVec(hipsparseDnVecDescr_t dnVecDescr) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseDnVecGet(
    const hipsparseDnVecDescr_t dnVecDescr,
    int64_t*                   size,
    void**                     values,
    hipDataType*              valueType) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseDnVecGetValues(
    const hipsparseDnVecDescr_t dnVecDescr,
    void**                     values) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseDnVecSetValues(
    hipsparseDnVecDescr_t dnVecDescr,
    void*                values) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t hipsparseCreateDnMat(
    hipsparseDnMatDescr_t* dnMatDescr,
    int64_t               rows,
    int64_t               cols,
    int64_t               ld,
    void*                 values,
    hipDataType          valueType,
    cusparseOrder_t       order) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t hipsparseDestroyDnMat(hipsparseDnMatDescr_t dnMatDescr) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseDnMatGet(
    const hipsparseDnMatDescr_t dnMatDescr,
    int64_t*                   rows,
    int64_t*                   cols,
    int64_t*                   ld,
    void**                     values,
    hipDataType*              type,
    cusparseOrder_t*           order) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseDnMatGetValues(
    const hipsparseDnMatDescr_t dnMatDescr,
    void**                     values) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseDnMatSetValues(
    hipsparseDnMatDescr_t dnMatDescr,
    void*                values) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseDnMatGetStridedBatch(
    const hipsparseDnMatDescr_t dnMatDescr,
    int*                       batchCount,
    int64_t*                   batchStride) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t hipsparseDnMatSetStridedBatch(
    hipsparseDnMatDescr_t dnMatDescr,
    int                  batchCount,
    int64_t              batchStride) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseSpVV_bufferSize(
    hipsparseHandle_t           handle,
    hipsparseOperation_t        opX,
    const cusparseSpVecDescr_t vecX,
    const hipsparseDnVecDescr_t vecY,
    const void*                result,
    hipDataType               computeType,
    size_t*                    bufferSize) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseSpVV(
    hipsparseHandle_t           handle,
    hipsparseOperation_t        opX,
    const cusparseSpVecDescr_t vecX,
    const hipsparseDnVecDescr_t vecY,
    void*                      result,
    hipDataType               computeType,
    void*                      externalBuffer) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t hipsparseSpMV_bufferSize(
    hipsparseHandle_t           handle,
    hipsparseOperation_t        opA,
    const void*                alpha,
    const hipsparseSpMatDescr_t matA,
    const hipsparseDnVecDescr_t vecX,
    const void*                beta,
    const hipsparseDnVecDescr_t vecY,
    hipDataType               computeType,
    hipsparseSpMVAlg_t          alg,
    size_t*                    bufferSize) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t hipsparseSpMV(
    hipsparseHandle_t           handle,
    hipsparseOperation_t        opA,
    const void*                alpha,
    const hipsparseSpMatDescr_t matA,
    const hipsparseDnVecDescr_t vecX,
    const void*                beta,
    const hipsparseDnVecDescr_t vecY,
    hipDataType               computeType,
    hipsparseSpMVAlg_t          alg,
    void*                      externalBuffer) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t hipsparseSpMM_bufferSize(
    hipsparseHandle_t           handle,
    hipsparseOperation_t        opA,
    hipsparseOperation_t        opB,
    const void*                alpha,
    const hipsparseSpMatDescr_t matA,
    const hipsparseDnMatDescr_t matB,
    const void*                beta,
    hipsparseDnMatDescr_t       matC,
    hipDataType               computeType,
    hipsparseSpMMAlg_t          alg,
    size_t*                    bufferSize) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t hipsparseSpMM(
    hipsparseHandle_t           handle,
    hipsparseOperation_t        opA,
    hipsparseOperation_t        opB,
    const void*                alpha,
    const hipsparseSpMatDescr_t matA,
    const hipsparseDnMatDescr_t matB,
    const void*                beta,
    hipsparseDnMatDescr_t       matC,
    hipDataType               computeType,
    hipsparseSpMMAlg_t          alg,
    void*                      externalBuffer) {
  return HIPSPARSE_STATUS_SUCCESS;
}

#endif  // #if CUSPARSE_VERSION < 10200 || WIN32_EXPOSE_SPMM_STUB_IMPL

#if CUSPARSE_VERSION < 10300 || WIN32_EXPOSE_SPMM_STUB_IMPL
// Generic APIs added in cuSPARSE 10.3 (CUDA 10.1.243)

hipsparseStatus_t cusparseConstrainedGeMM_bufferSize(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseConstrainedGeMM(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

#endif  // #if CUSPARSE_VERSION < 10300 || WIN32_EXPOSE_SPMM_STUB_IMPL

#if CUSPARSE_VERSION >= 11000
// Functions deleted in cuSparse 11.0

// cuSPARSE Level2 Function
hipsparseStatus_t cusparseScsrmv(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseDcsrmv(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseCcsrmv(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseZcsrmv(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

// cuSPARSE Level3 Function
hipsparseStatus_t hipsparseScsrmm(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t hipsparseDcsrmm(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseCcsrmm(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseZcsrmm(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t hipsparseScsrmm2(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t hipsparseDcsrmm2(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t hipsparseCcsrmm2(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t hipsparseZcsrmm2(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

// cuSPARSE Extra Function
hipsparseStatus_t cusparseXcsrgeamNnz(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseScsrgeam(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseDcsrgeam(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseCcsrgeam(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseZcsrgeam(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}


hipsparseStatus_t cusparseXcsrgemmNnz(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseScsrgemm(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseDcsrgemm(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseCcsrgemm(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseZcsrgemm(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

// cuSPARSE Format Convrsion
hipsparseStatus_t cusparseXcsr2coo(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseScsr2csc(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseDcsr2csc(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseCcsr2csc(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseZcsr2csc(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}
#endif // #if CUSPARSE_VERSION >= 11000

#if CUSPARSE_VERSION < 11100
// Functions added in cuSparse 11.1 (CUDA 11.0)

hipsparseStatus_t hipsparseCsrSetPointers(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t hipsparseSpMatGetSize(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

typedef void* hipsparseSpGEMMDescr_t;
typedef enum {} cusparseSpGEMMAlg_t;

hipsparseStatus_t hipsparseSpGEMM_createDescr(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t hipsparseSpGEMM_destroyDescr(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t hipsparseSpGEMM_workEstimation(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t hipsparseSpGEMM_compute(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t hipsparseSpGEMM_copy(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseGather(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

#endif // #if CUSPARSE_VERSION < 11100

#if CUSPARSE_VERSION < 11300
// Types and macros added in cuSparse 11.3 (CUDA 11.1.1)

typedef enum {} cusparseSparseToDenseAlg_t;
typedef enum {} cusparseDenseToSparseAlg_t;

#endif // CUSPARSE_VERSION < 11300

#if CUSPARSE_VERSION < 11500
// API added in cuSparse 11.5 (CUDA 11.3.0)

typedef enum {} cusparseSpMatAttribute_t;

#endif // CUSPARSE_VERSION < 11500

#if CUSPARSE_VERSION < 11600
// Generic APIs added in cuSPARSE 11.6 (CUDA 11.3.1)

typedef void* cusparseSpSMDescr_t;
typedef enum {} cusparseSpSMAlg_t;

#endif // #if CUSPARSE_VERSION < 11600

#if CUSPARSE_VERSION >= 12000
// Types and functions deleted in cuSPARSE 12.0 (CUDA 12.0)

typedef enum {} cusparseAlgMode_t;
typedef void* csrgemm2Info_t;
typedef void* csrsm2Info_t;
typedef void* csrsv2Info_t;

hipsparseStatus_t cusparseCreateCsrsv2Info(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseDestroyCsrsv2Info(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseCreateCsrsm2Info(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseDestroyCsrsm2Info(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t hipsparseCreateCsrgemm2Info(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t hipsparseDestroyCsrgemm2Info(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseSgthr(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseDgthr(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseCgthr(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseZgthr(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseCsrmvEx_bufferSize(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseCsrmvEx(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseScsrsv2_bufferSize(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseDcsrsv2_bufferSize(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseCcsrsv2_bufferSize(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseZcsrsv2_bufferSize(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseScsrsv2_analysis(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseDcsrsv2_analysis(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseCcsrsv2_analysis(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseZcsrsv2_analysis(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseScsrsv2_solve(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseDcsrsv2_solve(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseCcsrsv2_solve(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseZcsrsv2_solve(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseXcsrsv2_zeroPivot(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseScsrsm2_bufferSizeExt(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseDcsrsm2_bufferSizeExt(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseCcsrsm2_bufferSizeExt(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseZcsrsm2_bufferSizeExt(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseScsrsm2_analysis(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseDcsrsm2_analysis(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseCcsrsm2_analysis(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseZcsrsm2_analysis(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseScsrsm2_solve(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseDcsrsm2_solve(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseCcsrsm2_solve(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseZcsrsm2_solve(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseXcsrsm2_zeroPivot(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t hipsparseScsrgemm2_bufferSizeExt(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t hipsparseDcsrgemm2_bufferSizeExt(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseCcsrgemm2_bufferSizeExt(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseZcsrgemm2_bufferSizeExt(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t hipsparseXcsrgemm2Nnz(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t hipsparseScsrgemm2(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t hipsparseDcsrgemm2(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseCcsrgemm2(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseZcsrgemm2(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseScsc2dense(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseDcsc2dense(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseCcsc2dense(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseZcsc2dense(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseScsr2dense(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseDcsr2dense(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseCcsr2dense(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseZcsr2dense(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseSdense2csc(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseDdense2csc(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseCdense2csc(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseZdense2csc(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseSdense2csr(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseDdense2csr(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseCdense2csr(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseZdense2csr(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseSpMatSetStridedBatch(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseConstrainedGeMM(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseConstrainedGeMM_bufferSize(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseCreateCooAoS(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

hipsparseStatus_t cusparseCooAoSGet(...) {
  return HIPSPARSE_STATUS_SUCCESS;
}

#endif // #if CUSPARSE_VERSION >= 12000

#endif  // INCLUDE_GUARD_CUDA_CUPY_CUSPARSE_H
